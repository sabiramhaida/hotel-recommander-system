# -*- coding: utf-8 -*-
"""knn1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19kV-1LW8XER8Tn7-RUkN03QjlDkBOOKe
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.neighbors import NearestNeighbors
from datetime import datetime
from pymongo import MongoClient
import numpy as np
import random 
import time
import sys

"""In this approach we can't calculate the quality , because we have retrieved the k nearest neighbours only (and not predicting a field by finding k neighbours and then choosen the number k according to the
Quality found by training the model)"""
"""Import data from mongodb"""
features_name_userRating = ['_id','username','hotel_name','score']
features_name_userActivity = ['_id','hotel_name','activity','username','date']
features_name_hotel = ['_id','name','Country','Region','Street','Zip','Property_amenties','Room_features'
                       ,'Hotel_style','Hotel_class','price','Hotel_score_reviews','Location_score','Cleanliness_score'
                       ,'Service_score','Value_score','Location']

client = MongoClient("mongodb://aym:root@localhost:27017/?authSource=CodePhenomRemastered")
db=client.HotelRecommenderSystem
dbHotel = client.HotelRecommenderSystem
dataset_cursor_mongo_rating = db.UserRating
datset_cursor_mongo_Hotel = db.Hotel
datset_cursor_mongo_activity = db.UserActivity


list = []
for index,data in enumerate(datset_cursor_mongo_Hotel.find()):
    data_dictionnary = {}
    for index in range(0,len(features_name_hotel)):
        data_dictionnary[features_name_hotel[index]] = data[features_name_hotel[index]]
        list.append(data_dictionnary)
hotelFullDataset = pd.DataFrame(list)
hotelFullDataset.dropna()

list = []
for index,data in enumerate(dataset_cursor_mongo_rating.find()):
    data_dictionnary = {}
    for index in range(0,len(features_name_userRating)):
        data_dictionnary[features_name_userRating[index]] = data[features_name_userRating[index]]
        list.append(data_dictionnary)
userRatingDataset = pd.DataFrame(list)
userRatingDataset.head()
userRatingDataset = userRatingDataset[userRatingDataset['hotel_name'].isin(hotelFullDataset['name'])]
userRatingDataset.dropna()

list = []
for index,data in enumerate(datset_cursor_mongo_activity.find()):
    data_dictionnary = {}
    for index in range(0,len(features_name_userActivity)):
        data_dictionnary[features_name_userActivity[index]] = data[features_name_userActivity[index]]
        list.append(data_dictionnary)
userActivityDataset = pd.DataFrame(list)
userActivityDataset = userActivityDataset[userActivityDataset['hotel_name'].isin(hotelFullDataset['name'])]

userActivityDataset.dropna()


#We give 1 if the user has view the hotel page else 0
hotelDataset = pd.DataFrame()
hotelDataset['username'] = pd.unique(userActivityDataset['username'])
hotelsName = pd.unique(userActivityDataset['hotel_name'])


for hotelName in hotelsName :
  hotelDataset[hotelName] = pd.Series([1 if len(userActivityDataset.loc[:,'hotel_name'][userActivityDataset['username'] == hotelDataset.loc[i,'username']]) > 0  else 0 for i in range(0,len(hotelDataset)-1)])
hotelDataset.dropna()

knn = NearestNeighbors(n_neighbors=len(pd.unique(hotelDataset.dropna()['username'])))
#Creating a numpy array in order to process it with knn
test = hotelDataset.loc[:,hotelDataset.columns != 'username'].values
test = test[~np.isnan(test)].reshape(-1, len(hotelDataset.columns) - 1)

knn.fit(test)



#We give the hotel of the k nearest neigbours by descending orders, and for each neighbours we take the top scored hotel by score
def recommendedHotelsForUserGeneral(username,filter):
    hotelFullDataset.dropna()
    username = hotelDataset[hotelDataset['username'] == username].loc[:,hotelDataset.columns != 'username'].values[0].reshape(1,-1)
    users = []
    list = knn.kneighbors(username, return_distance=False)
    for i in list[0]:
      users.append(hotelDataset.at[i,  'username'])
    listOfHotelsByScore = []
    for user in set(users):
      listOfHotelsByScore.extend(pd.unique(userRatingDataset[userRatingDataset['username'] == user].sort_values(by='score', ascending=False)['hotel_name']))
    temp = listOfHotelsByScore
    listOfHotelsByScore.extend(hotelFullDataset[~hotelFullDataset['name'].isin(temp)]['name'])
    if(filter == 'all'):
          for hotelName in set(listOfHotelsByScore):
            print(hotelName)
    elif(filter == 'country'):
          for hotelName in set(listOfHotelsByScore):
            if(hotelFullDataset[hotelFullDataset['name'] == hotelName]['Country'].values[0] == sys.argv[4]):
                  print(hotelName)
    elif(filter == 'class'):
          for hotelName in set(listOfHotelsByScore):
                v_class = float(hotelFullDataset[hotelFullDataset['name'] == hotelName]['Hotel_class'].values[0])

                if(  v_class > float(sys.argv[4]) and v_class < float(sys.argv[5])):
                  print(hotelName)
    elif(filter == 'price'):
          for hotelName in set(listOfHotelsByScore):
                price = float(hotelFullDataset[hotelFullDataset['name'] == hotelName]['price'].values[0])
                if(  price > float(sys.argv[4]) and price < float(sys.argv[5])):
                  print(hotelName)
    

if __name__== "__main__":
  recommendedHotelsForUserGeneral(username=sys.argv[2],filter=sys.argv[3])
